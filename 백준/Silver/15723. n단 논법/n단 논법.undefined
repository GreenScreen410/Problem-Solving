#include <climits>
#include <iostream>
#include <vector>
using namespace std;

auto floyd_warshall(auto& graph) {
  for (int k = 0; k < graph.size(); k++) {
    for (int i = 0; i < graph.size(); i++) {
      for (int j = 0; j < graph.size(); j++) {
        graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int n;
  cin >> n;
  
  vector<vector<long long>> graph(26, vector<long long>(26, INT_MAX));
  for (int i = 0; i < 26; i++) {
    graph[i][i] = 0;
  }
  
  while (n--) {
    char a, b;
    string is;
    cin >> a >> is >> b;
    graph[a - 'a'][b - 'a'] = 1;
  }
  
  floyd_warshall(graph);
  
  int m;
  cin >> m;
  
  while (m--) {
    char a, b;
    string is;
    cin >> a >> is >> b;
    cout << (graph[a - 'a'][b - 'a'] == INT_MAX ? "F" : "T") << "\n";
  }
  
  return 0;
}