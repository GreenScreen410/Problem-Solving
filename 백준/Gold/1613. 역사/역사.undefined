#include <bits/stdc++.h>
using namespace std;

auto floyd_warshall(auto& graph) {
  int n = graph.size();

  for (int i = 1; i < n; i++) graph[i][i] = 0;

  for (int k = 1; k < n; k++) {
    for (int i = 1; i < n; i++) {
      for (int j = 1; j < n; j++) {
        graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]);
      }
    }
  }
  return graph;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int n, k;
  cin >> n >> k;

  vector<vector<long long>> graph(n + 1, vector<long long>(n + 1, INT_MAX));
  while (k--) {
    int a, b;
    cin >> a >> b;
    graph[a][b] = 1;
  }

  int s;
  cin >> s;

  auto result = floyd_warshall(graph);
  while (s--) {
    int a, b;
    cin >> a >> b;

    if (result[a][b] != INT_MAX) cout << -1 << "\n";
    else if (result[b][a] != INT_MAX) cout << 1 << "\n";
    else cout << 0 << "\n";
  }

  return 0;
}