#include <climits>
#include <iostream>
#include <vector>
using namespace std;

auto floyd_warshall(auto& graph) {
  for (int k = 1; k < graph.size(); k++) {
    for (int i = 1; i < graph.size(); i++) {
      for (int j = 1; j < graph.size(); j++) {
        graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int N, M;
  cin >> N >> M;
  
  vector<vector<long long>> graph(N + 1, vector<long long>(N + 1, INT_MAX));
  for (int i = 1; i <= N; i++) {
    for (int j = 1; j <= N; j++) {
      cin >> graph[i][j];
    }
  }
  
  floyd_warshall(graph);
  
  while (M--) {
    long long A, B, C;
    cin >> A >> B >> C;
    
    if (graph[A][B] <= C && graph[A][B] != INT_MAX) {
      cout << "Enjoy other party\n";
    } else {
      cout << "Stay here\n";
    }
  }
  
  return 0;
}