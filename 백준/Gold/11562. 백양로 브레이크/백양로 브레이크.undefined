#include <climits>
#include <iostream>
#include <vector>
using namespace std;

auto floyd_warshall(auto& graph) {
  for (int k = 1; k < graph.size(); k++) {
    for (int i = 1; i < graph.size(); i++) {
      for (int j = 1; j < graph.size(); j++) {
        graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int n, m;
  cin >> n >> m;

  vector<vector<long long>> graph(n + 1, vector<long long>(n + 1, INT_MAX));
  for (int i = 1; i <= n; i++) {
    graph[i][i] = 0;
  }

  while (m--) {
    long long u, v, b;
    cin >> u >> v >> b;

    graph[u][v] = 0;
    graph[v][u] = 0;
    if (b == 0) graph[v][u] = 1;
  }

  floyd_warshall(graph);

  int T;
  cin >> T;

  while (T--) {
    long long s, e;
    cin >> s >> e;
    cout << graph[s][e] << "\n";
  }

  return 0;
}