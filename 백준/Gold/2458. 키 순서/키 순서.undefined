#include <algorithm>
#include <climits>
#include <iostream>
#include <vector>
using namespace std;

auto floyd_warshall(auto& graph) {
  for (int k = 1; k < graph.size(); k++) {
    for (int i = 1; i < graph.size(); i++) {
      for (int j = 1; j < graph.size(); j++) {
        graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int N, M;
  cin >> N >> M;
  
  vector<vector<long long>> graph(N + 1, vector<long long>(N + 1, INT_MAX));
  for (int i = 1; i <= N; i++) {
    graph[i][i] = 0;
  }
  
  while (M--) {
    long long A, B;
    cin >> A >> B;
    graph[A][B] = 1;
  }
  
  floyd_warshall(graph);
  
  int result = 0;
  for (int i = 1; i <= N; i++) {
    int count = 0;
    for (int j = 1; j <= N; j++) {
      if (i == j) continue;
      if (graph[i][j] != INT_MAX || graph[j][i] != INT_MAX) count++;
    }
    if (count == N - 1) result++;
  }
  
  cout << result;
  
  return 0;
}