#include <climits>
#include <iostream>
#include <vector>
using namespace std;

auto floyd_warshall(auto& graph) {
  for (int k = 1; k < graph.size(); k++) {
    for (int i = 1; i < graph.size(); i++) {
      for (int j = 1; j < graph.size(); j++) {
        graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]);
      }
    }
  }
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int V, E;
  cin >> V >> E;

  vector<vector<long long>> graph(V + 1, vector<long long>(V + 1, INT_MAX));
  for (int i = 1; i <= V; i++) {
    graph[i][i] = 0;
  }

  while (E--) {
    long long a, b, c;
    cin >> a >> b >> c;
    graph[a][b] = c;
  }

  floyd_warshall(graph);

  long long min_cycle = INT_MAX;
  for (int i = 1; i <= V; i++) {
    for (int j = 1; j <= V; j++) {
      if (i == j) continue;
      min_cycle = min(min_cycle, graph[i][j] + graph[j][i]);
    }
  }

  cout << (min_cycle == INT_MAX ? -1 : min_cycle) << "\n";

  return 0;
}