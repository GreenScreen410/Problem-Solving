#include <climits>
#include <iostream>
#include <vector>
using namespace std;

auto floyd_warshall(auto& graph) {
  for (int k = 1; k < graph.size(); k++) {
    for (int i = 1; i < graph.size(); i++) {
      for (int j = 1; j < graph.size(); j++) {
        graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]);
      }
    }
  }
  return graph;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  
  int N, M, Q;
  cin >> N >> M >> Q;
  
  vector<vector<long long>> graph(N + 1, vector<long long>(N + 1, INT_MAX));
  for (int i = 1; i <= N; i++) {
    graph[i][i] = 0;
  }
  
  while (M--) {
    long long b, t, c;
    cin >> b >> t >> c;
    graph[b][t] = c;
  }
  
  vector<vector<vector<long long>>> removed_k(N + 1);
  for(int k = 1; k <= N; k++) {
    auto modified = graph;
    for(int i = 1; i <= N; i++) {
      modified[i][k] = INT_MAX;
      modified[k][i] = INT_MAX;
    }
    removed_k[k] = floyd_warshall(modified);
  }
  
  while (Q--) {
    long long s, k, e;
    cin >> s >> k >> e;
    cout << (removed_k[k][s][e] == INT_MAX ? "No" : to_string(removed_k[k][s][e])) << "\n";
  }
  
  return 0;
}