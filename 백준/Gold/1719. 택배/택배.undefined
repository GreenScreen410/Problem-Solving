#include <bits/stdc++.h>
using namespace std;

auto floyd_warshall(auto& graph) {
  int n = graph.size() - 1;
  vector<vector<int>> next_vertex(n + 1, vector<int>(n + 1, -1));
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= n; j++) {
      if (i != j && graph[i][j] != INT_MAX)
        next_vertex[i][j] = j;
    }
  }

  for (int k = 1; k <= n; k++) {
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= n; j++) {
        if (graph[i][j] > graph[i][k] + graph[k][j]) {
          graph[i][j] = graph[i][k] + graph[k][j];
          next_vertex[i][j] = next_vertex[i][k];
        }
      }
    }
  }

  return make_pair(graph, next_vertex);
}

int main() {
  int n, m;
  cin >> n >> m;

  vector<vector<long long>> graph(n + 1, vector<long long>(n + 1, INT_MAX));
  for (int i = 1; i <= n; i++) {
    graph[i][i] = 0;
  }

  while (m--) {
    int a, b, w;
    cin >> a >> b >> w;
    graph[a][b] = w;
    graph[b][a] = w;
  }

  auto [result, next_vertex] = floyd_warshall(graph);
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= n; j++) {
      if (result[i][j] == 0) cout << "- ";
      else cout << next_vertex[i][j] << " ";
    }
    cout << "\n";
  }

  return 0;
}