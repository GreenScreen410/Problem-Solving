#include <bits/stdc++.h>
using namespace std;

auto floyd_warshall(auto& graph) {
  int n = graph.size() - 1;

  for (int i = 1; i <= n; i++) graph[i][i] = 0;
  for (int k = 1; k <= n; k++) {
    for (int i = 1; i <= n; i++) {
      for (int j = 1; j <= n; j++) {
        graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]);
      }
    }
  }

  return graph;
}

int main() {
  int n, m, r;
  cin >> n >> m >> r;

  vector<int> item(n + 1);
  for (int i = 1; i <= n; i++) cin >> item[i];

  vector<vector<long long>> graph(n + 1, vector<long long>(n + 1, INT_MAX));

  while (r--) {
    int a, b, l;
    cin >> a >> b >> l;
    graph[a][b] = l;
    graph[b][a] = l;
  }

  auto result = floyd_warshall(graph);
  int answer = 0;

  for (int i = 1; i <= n; i++) {
    int sum = 0;
    for (int j = 1; j <= n; j++) {
      if (result[i][j] <= m) sum += item[j];
    }
    answer = max(answer, sum);
  }

  cout << answer << "\n";

  return 0;
}