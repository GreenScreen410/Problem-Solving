#include <bits/stdc++.h>
using namespace std;

template <typename T>
struct DisjointSet {
  vector<T> parent;

  DisjointSet(int n) : parent(n) {
    iota(parent.begin(), parent.end(), 0);
  }

  T find(T x) {
    if (parent[x] != x) parent[x] = find(parent[x]);
    return parent[x];
  }

  void merge(T x, T y) {
    T root_x = find(x);
    T root_y = find(y);
    if (root_x != root_y) parent[root_x] = root_y;
  }
};

int main() {
  int N, M;
  cin >> N >> M;

  DisjointSet<int> dsu(N);
  while (M--) {
    int a, b;
    cin >> a >> b;
    dsu.merge(a - 1, b - 1);
  }

  int answer = 0;
  for (int i = 0; i < N; i++) {
    if (dsu.find(i) != dsu.find(0)) answer++;
    dsu.merge(i, 0);
  }

  cout << answer << "\n";

  return 0;
}