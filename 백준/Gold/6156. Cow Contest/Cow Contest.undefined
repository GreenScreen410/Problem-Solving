#include <bits/stdc++.h>
using namespace std;

auto floyd_warshall(auto& graph) {
  int n = graph.size();
  
  for (int i = 1; i < n; i++) graph[i][i] = 0;
  
  for (int k = 1; k < n; k++)
    for (int i = 1; i < n; i++)
      for (int j = 1; j < n; j++)
        if (graph[i][k] != INT_MAX && graph[k][j] != INT_MAX)
          graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j]);

  return graph;
}

int main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);

  int N, M;
  cin >> N >> M;
  
  vector<vector<long long>> graph(N + 1, vector<long long>(N + 1, INT_MAX));
  while (M--) {
    int A, B;
    cin >> A >> B;
    graph[A][B] = 1;
  }

  auto result = floyd_warshall(graph);
  
  int count = 0;
  for (int i = 1; i <= N; i++) {
    bool valid = true;
    for (int j = 1; j <= N; j++) {
      if (i == j) continue;
      if (result[i][j] == INT_MAX && result[j][i] == INT_MAX) {
        valid = false;
        break;
      }
    }
    if (valid) count++;
  }
  
  cout << count << "\n";
  
  return 0;
}