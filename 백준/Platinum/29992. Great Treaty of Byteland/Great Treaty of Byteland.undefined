#include <bits/stdc++.h>
using namespace std;

struct Point {
  long long x, y, id;
  bool operator<(auto& other) {
    return x == other.x ? y < other.y : x < other.x;
  }
};

auto ccw(auto& a, auto& b, auto& c) {
  return (a.x * b.y + b.x * c.y + c.x * a.y) - (a.y * b.x + b.y * c.x + c.y * a.x);
}

vector<Point> convex_hull(auto& points) {
  if (points.size() < 2) return points;
  sort(points.begin(), points.end());

  vector<Point> lower, upper;
  for (auto& p : points) {
    while (lower.size() >= 2 && ccw(end(lower)[-2], lower.back(), p) < 0) lower.pop_back();
    lower.push_back(p);
  }
  for (int i = (int)points.size() - 1; i >= 0; --i) {
    auto& p = points[i];
    while (upper.size() >= 2 && ccw(end(upper)[-2], upper.back(), p) < 0) upper.pop_back();
    upper.push_back(p);
  }
  lower.pop_back();
  upper.pop_back();
  lower.insert(lower.end(), upper.begin(), upper.end());

  sort(lower.begin(), lower.end());
  lower.erase(unique(lower.begin(), lower.end(), [](auto& a, auto& b) { return a.x == b.x && a.y == b.y; }), lower.end());

  return lower;
}

int main() {
  int N;
  cin >> N;

  vector<Point> points(N);
  for (int i = 0; i < N; i++) {
    cin >> points[i].x >> points[i].y;
    points[i].id = i + 1;
  }

  auto hull = convex_hull(points);
  sort(hull.begin(), hull.end(), [](auto& a, auto& b) { return a.id < b.id; });

  for (auto i : hull) cout << i.id << " ";
  cout << "\n";

  return 0;
}